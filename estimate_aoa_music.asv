function [P_peaks_idx, phi_e] = estimate_aoa_music(received_data, params)
% ----------------------------------------------
% Estimates Angle of Arrival (AoA) using MUSIC algorithm
% Inputs:
%   - received_data [params.N_Tx, params.packet_length]
%   - params
% Outputs:
%   - P_peaks_idx [params.N_signals, 1]
%   - phi_e [params.N_signals, 1]
%   - Plot of MUSIC Spectrum (x-axis: AoA in degrees, y-axis: Spectrum)
% ----------------------------------------------

R = (received_data * received_data') / size(received_data, 2);

% Eigenvalue decomposition
[E, D] = eig(R);
eigenvalues = diag(D);
[~, index] = sort(eigenvalues, 'descend');
E = E(:, index);

noise_subspace = E(:, 2:params.N_Tx);

phi_list = linspace(-pi/2, pi/2, 1000)';  % Delay list

d = params.antenna_distance;
delta_d_list = (0:d:(params.N_Tx - 1) * d)'; 

Omega = exp(-1i * 2 * pi * delta_d_list * sin(phi_list'));
sv_projection = abs(noise_subspace' * Omega).^2;
P_music = 1 ./ sum(sv_projection);  % Compute reciprocal and take absolute value
P_MUSIC_max = max(P_music);
P_MUSIC_dB = 10*log10(P_music/P_MUSIC_max);

% Extract peaks of MUSIC spectrum
[P_peaks, P_peaks_idx] = findpeaks(P_MUSIC_dB);  % Extract peaks
[P_peaks, I] = sort(P_peaks, 'descend');  % Sort peaks in descending order
P_peaks_idx = P_peaks_idx(I);
P_peaks = P_peaks(1:params.N_signals);  % Extract top N signals
P_peaks_idx = P_peaks_idx(1:params.N_signals);
phi_e = phi_list(P_peaks_idx) * 180 / pi;  % Estimate AoA

disp('Estimated AoA (degrees):');
disp(phi_e);

% Plotting
figure;
plot(phi_list * 180 / pi, P_MUSIC_dB, 'k', 'LineWidth', 2);
xlabel('\phi (deg)');
ylabel('Spectrum');
grid on;
hold on;
plot(phi_e, P_peaks, 'r.', 'MarkerSize', 25);
hold on;
for idx = 1:params.N_signals
    text(phi_e(idx) + 3, P_peaks(idx), sprintf('%0.1fÂ°', phi_e(idx)));
end

end
